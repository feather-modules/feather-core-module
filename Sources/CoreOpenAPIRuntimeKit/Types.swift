// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {}

/// Convenience overloads for operation inputs.
extension APIProtocol {
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// dev
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8080",
            variables: []
        )
    }
    /// live
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8081",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError`.
        public struct FeatherCoreUnsupportedMediaTypeError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError/key`.
            public var key: Components.Schemas.FeatherCoreUnsupportedMediaTypeErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnsupportedMediaTypeError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnsupportedMediaTypeErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeErrorKey`.
        public typealias FeatherCoreUnsupportedMediaTypeErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError`.
        public struct FeatherCoreInternalServerErrorError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError/key`.
            public var key: Components.Schemas.FeatherCoreInternalServerErrorErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreInternalServerErrorError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreInternalServerErrorErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorErrorKey`.
        public typealias FeatherCoreInternalServerErrorErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError`.
        public struct FeatherCoreGoneError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError/key`.
            public var key: Components.Schemas.FeatherCoreGoneErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreGoneError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreGoneErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneErrorKey`.
        public typealias FeatherCoreGoneErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError`.
        public struct FeatherCoreNotAcceptableError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError/key`.
            public var key: Components.Schemas.FeatherCoreNotAcceptableErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreNotAcceptableError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreNotAcceptableErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableErrorKey`.
        public typealias FeatherCoreNotAcceptableErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError`.
        public struct FeatherCoreMethodNotAllowedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError/key`.
            public var key: Components.Schemas.FeatherCoreMethodNotAllowedErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreMethodNotAllowedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreMethodNotAllowedErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedErrorKey`.
        public typealias FeatherCoreMethodNotAllowedErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError`.
        public struct FeatherCoreNotFoundError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError/key`.
            public var key: Components.Schemas.FeatherCoreNotFoundErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreNotFoundError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreNotFoundErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundErrorKey`.
        public typealias FeatherCoreNotFoundErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError`.
        public struct FeatherCoreBadRequestError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError/key`.
            public var key: Components.Schemas.FeatherCoreBadRequestErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreBadRequestError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreBadRequestErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestErrorKey`.
        @frozen public enum FeatherCoreBadRequestErrorKey: String, Codable, Hashable, Sendable {
            case missingRequestBody = "missingRequestBody"
            case invalidRequestBody = "invalidRequestBody"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError`.
        public struct FeatherCoreUnprocessableContentError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/key`.
            public var key: Components.Schemas.FeatherCoreUnprocessableContentErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/failures`.
            public var failures: Components.Schemas.FeatherCoreUnprocessableContentErrorFailure
            /// Creates a new `FeatherCoreUnprocessableContentError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            ///   - failures:
            public init(
                key: Components.Schemas.FeatherCoreUnprocessableContentErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage,
                failures: Components.Schemas.FeatherCoreUnprocessableContentErrorFailure
            ) {
                self.key = key
                self.message = message
                self.failures = failures
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
                case failures
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorKey`.
        @frozen public enum FeatherCoreUnprocessableContentErrorKey: String, Codable, Hashable, Sendable {
            case validation = "validation"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailure`.
        public typealias FeatherCoreUnprocessableContentErrorFailure = [Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetail]
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail`.
        public struct FeatherCoreUnprocessableContentErrorFailureDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail/key`.
            public var key: Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetailKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnprocessableContentErrorFailureDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetailKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// Related field key for the error detail.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetailKey`.
        public typealias FeatherCoreUnprocessableContentErrorFailureDetailKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError`.
        public struct FeatherCoreUnauthorizedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError/key`.
            public var key: Components.Schemas.FeatherCoreUnauthorizedErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnauthorizedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnauthorizedErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedErrorKey`.
        @frozen public enum FeatherCoreUnauthorizedErrorKey: String, Codable, Hashable, Sendable {
            case invalidUserToken = "invalidUserToken"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError`.
        public struct FeatherCoreConflictError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError/key`.
            public var key: Components.Schemas.FeatherCoreConflictErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreConflictError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreConflictErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictErrorKey`.
        public typealias FeatherCoreConflictErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError`.
        public struct FeatherCoreForbiddenError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError/key`.
            public var key: Components.Schemas.FeatherCoreForbiddenErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreForbiddenError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreForbiddenErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenErrorKey`.
        public typealias FeatherCoreForbiddenErrorKey = Swift.String
        /// The original error message provided by the system.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreErrorMessage`.
        public typealias FeatherCoreErrorMessage = Swift.String
        /// Content length
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreHeadersContentLength`.
        public typealias FeatherCoreHeadersContentLength = Swift.Int
        /// Total elements
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListCount`.
        public typealias FeatherCoreListCount = Swift.Int
        /// Page properties
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage`.
        public struct FeatherCoreListPage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage/size`.
            public var size: Components.Schemas.FeatherCoreListPageSize
            /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage/index`.
            public var index: Components.Schemas.FeatherCoreListPageIndex
            /// Creates a new `FeatherCoreListPage`.
            ///
            /// - Parameters:
            ///   - size:
            ///   - index:
            public init(
                size: Components.Schemas.FeatherCoreListPageSize,
                index: Components.Schemas.FeatherCoreListPageIndex
            ) {
                self.size = size
                self.index = index
            }
            public enum CodingKeys: String, CodingKey {
                case size
                case index
            }
        }
        /// Page size
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPageSize`.
        public typealias FeatherCoreListPageSize = Swift.Int
        /// Page index
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPageIndex`.
        public typealias FeatherCoreListPageIndex = Swift.Int
        /// Order of the list (ascending or descending).
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListOrder`.
        @frozen public enum FeatherCoreListOrder: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// Value of the search term.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListSearch`.
        public typealias FeatherCoreListSearch = Swift.String
        /// Object creation date
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreCreatedAt`.
        public typealias FeatherCoreCreatedAt = Foundation.Date
        /// Last update for the object
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUpdatedAt`.
        public typealias FeatherCoreUpdatedAt = Foundation.Date
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The list search value
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListSearch`.
        public typealias FeatherCoreListSearch = Components.Schemas.FeatherCoreListSearch
        /// The number of items per page
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListPageSize`.
        public typealias FeatherCoreListPageSize = Components.Schemas.FeatherCoreListPageSize
        /// The current page number
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListPageIndex`.
        public typealias FeatherCoreListPageIndex = Components.Schemas.FeatherCoreListPageIndex
        /// Sort order parameter
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListOrder`.
        public typealias FeatherCoreListOrder = Components.Schemas.FeatherCoreListOrder
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct FeatherCoreUnsupportedMediaType: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnsupportedMediaType/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnsupportedMediaType/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnsupportedMediaTypeError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnsupportedMediaTypeError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnsupportedMediaType.Body
            /// Creates a new `FeatherCoreUnsupportedMediaType`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnsupportedMediaType.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreHead: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreHead/headers`.
            public struct Headers: Sendable, Hashable {
                /// Content length header
                ///
                /// - Remark: Generated from `#/components/responses/FeatherCoreHead/headers/Content-Length`.
                public var Content_hyphen_Length: Components.Headers.Content_hyphen_Length?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Content_hyphen_Length: Content length header
                public init(Content_hyphen_Length: Components.Headers.Content_hyphen_Length? = nil) {
                    self.Content_hyphen_Length = Content_hyphen_Length
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.FeatherCoreHead.Headers
            /// Creates a new `FeatherCoreHead`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.FeatherCoreHead.Headers = .init()) {
                self.headers = headers
            }
        }
        public struct FeatherCoreNoContent: Sendable, Hashable {
            /// Creates a new `FeatherCoreNoContent`.
            public init() {}
        }
        public struct FeatherCoreInternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreInternalServerError/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreInternalServerError/content/application\/json`.
                case json(Components.Schemas.FeatherCoreInternalServerErrorError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreInternalServerErrorError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreInternalServerError.Body
            /// Creates a new `FeatherCoreInternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreInternalServerError.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreOk: Sendable, Hashable {
            /// Creates a new `FeatherCoreOk`.
            public init() {}
        }
        public struct FeatherCoreGone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreGone/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreGone/content/application\/json`.
                case json(Components.Schemas.FeatherCoreGoneError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreGoneError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreGone.Body
            /// Creates a new `FeatherCoreGone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreGone.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreNotAcceptable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreNotAcceptable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreNotAcceptable/content/application\/json`.
                case json(Components.Schemas.FeatherCoreNotAcceptableError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreNotAcceptableError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreNotAcceptable.Body
            /// Creates a new `FeatherCoreNotAcceptable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreNotAcceptable.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreMethodNotAllowed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreMethodNotAllowed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreMethodNotAllowed/content/application\/json`.
                case json(Components.Schemas.FeatherCoreMethodNotAllowedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreMethodNotAllowedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreMethodNotAllowed.Body
            /// Creates a new `FeatherCoreMethodNotAllowed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreMethodNotAllowed.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreNotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreNotFound/content/application\/json`.
                case json(Components.Schemas.FeatherCoreNotFoundError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreNotFoundError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreNotFound.Body
            /// Creates a new `FeatherCoreNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreNotFound.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreBadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreBadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreBadRequest/content/application\/json`.
                case json(Components.Schemas.FeatherCoreBadRequestError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreBadRequestError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreBadRequest.Body
            /// Creates a new `FeatherCoreBadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreBadRequest.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreUnprocessableContent: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnprocessableContent/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnprocessableContent/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnprocessableContentError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnprocessableContentError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnprocessableContent.Body
            /// Creates a new `FeatherCoreUnprocessableContent`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnprocessableContent.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreUnauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnauthorized/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnauthorizedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnauthorizedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnauthorized.Body
            /// Creates a new `FeatherCoreUnauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnauthorized.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreConflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreConflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreConflict/content/application\/json`.
                case json(Components.Schemas.FeatherCoreConflictError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreConflictError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreConflict.Body
            /// Creates a new `FeatherCoreConflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreConflict.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreForbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreForbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreForbidden/content/application\/json`.
                case json(Components.Schemas.FeatherCoreForbiddenError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreForbiddenError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreForbidden.Body
            /// Creates a new `FeatherCoreForbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreForbidden.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// Content length header
        ///
        /// - Remark: Generated from `#/components/headers/Content-Length`.
        public typealias Content_hyphen_Length = Components.Schemas.FeatherCoreHeadersContentLength
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {}
